{
    "openapi": "3.0.1",
    "info": {
        "title": "RSSBus OpenAPI",
        "version": "25.3.9393.0"
    },
    "servers": [
        {
            "url": "http://localhost:8001/api.rsc"
        }
    ],
    "paths": {
        "/certificates": {
            "get": {
                "summary": "Return certificates",
                "description": "Returns records from the certificates entity that match the specified query parameters.  All records will be returned when no parameters are specified.",
                "tags": [
                    "certificates"
                ],
                "operationId": "getAllcertificates",
                "parameters": [
                    {
                        "name": "$select",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "A comma-separated list of properties to include in the results. When this field is left empty, all properties will be returned."
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Order the results by this property in ascending or descending order.  Example for ascending: 'Name ASC' Example for descending: 'Name DESC'"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of results to return."
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "This is the offset of results to skip when returning results."
                    },
                    {
                        "name": "$count",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "When set, the results will return a count of results and not the actual results."
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Use this to filter the results by specific property values. For example, you can use the following filter to retrieve records with the name 'John': $filter=Name eq 'John'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "certificates response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/certificates"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            },
            "post": {
                "summary": "Create certificates",
                "description": "Creates a new certificates object with the specified parameters.",
                "tags": [
                    "certificates"
                ],
                "operationId": "createcertificates",
                "requestBody": {
                    "description": "The certificates entity to post",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/certificates"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "certificates created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/certificates"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/certificates/$count": {
            "get": {
                "summary": "Return count of certificates",
                "description": "Returns count of records from the certificates entity that match the specified query parameters.  All count will be returned when no parameters are specified.",
                "tags": [
                    "certificates"
                ],
                "operationId": "getcertificatesCount",
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Use this to filter the results by specific property values. For example, you can use the following filter to retrieve records with the name 'John': $filter=Name eq 'John'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The count",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "type": "string",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/certificates('{Name}')": {
            "get": {
                "summary": "Return a single certificates",
                "description": "Returns a single certificates object using the specified key.",
                "tags": [
                    "certificates"
                ],
                "operationId": "getcertificates",
                "parameters": [
                    {
                        "name": "Name",
                        "in": "path",
                        "description": "The key Name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "$select",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Select structural property"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "certificates response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/certificates"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            },
            "delete": {
                "summary": "Delete certificates",
                "description": "Deletes the specified certificates object.",
                "tags": [
                    "certificates"
                ],
                "operationId": "deletecertificates",
                "parameters": [
                    {
                        "name": "Name",
                        "in": "path",
                        "description": "The key Name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "certificates deleted",
                        "content": {}
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/certificates('{Name}')/{propertyName}/$value": {
            "get": {
                "summary": "Return specified property value of specified certificates",
                "description": "Returns property value of certificates object using the specified key and property name.",
                "tags": [
                    "certificates"
                ],
                "operationId": "getcertificatesProperty",
                "parameters": [
                    {
                        "name": "Name",
                        "in": "path",
                        "description": "The key Name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "propertyName",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The property name",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The property value",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/connectors": {
            "get": {
                "summary": "Return connectors",
                "description": "Returns records from the connectors entity that match the specified query parameters.  All records will be returned when no parameters are specified.",
                "tags": [
                    "connectors"
                ],
                "operationId": "getAllconnectors",
                "parameters": [
                    {
                        "name": "$select",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "A comma-separated list of properties to include in the results. When this field is left empty, all properties will be returned."
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Order the results by this property in ascending or descending order.  Example for ascending: 'Name ASC' Example for descending: 'Name DESC'"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of results to return."
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "This is the offset of results to skip when returning results."
                    },
                    {
                        "name": "$count",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "When set, the results will return a count of results and not the actual results."
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Use this to filter the results by specific property values. For example, you can use the following filter to retrieve records with the name 'John': $filter=Name eq 'John'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "connectors response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/connectors"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            },
            "post": {
                "summary": "Create connectors",
                "description": "Creates a new connectors object with the specified parameters.",
                "tags": [
                    "connectors"
                ],
                "operationId": "createconnectors",
                "requestBody": {
                    "description": "The connectors entity to post",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/connectors"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "connectors created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/connectors"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/connectors/$count": {
            "get": {
                "summary": "Return count of connectors",
                "description": "Returns count of records from the connectors entity that match the specified query parameters.  All count will be returned when no parameters are specified.",
                "tags": [
                    "connectors"
                ],
                "operationId": "getconnectorsCount",
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Use this to filter the results by specific property values. For example, you can use the following filter to retrieve records with the name 'John': $filter=Name eq 'John'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The count",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "type": "string",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/connectors('{ConnectorId}')": {
            "get": {
                "summary": "Return a single connectors",
                "description": "Returns a single connectors object using the specified key.",
                "tags": [
                    "connectors"
                ],
                "operationId": "getconnectors",
                "parameters": [
                    {
                        "name": "ConnectorId",
                        "in": "path",
                        "description": "The key ConnectorId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "$select",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Select structural property"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "connectors response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/connectors"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            },
            "put": {
                "summary": "Update connectors",
                "description": "Updates the specified connectors object.",
                "tags": [
                    "connectors"
                ],
                "operationId": "updateconnectors",
                "parameters": [
                    {
                        "name": "ConnectorId",
                        "in": "path",
                        "description": "The key ConnectorId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The connectors entity to update.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/connectors"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "EntitySet connectors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/connectors"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "connectors updated",
                        "content": {}
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            },
            "delete": {
                "summary": "Delete connectors",
                "description": "Deletes the specified connectors object.",
                "tags": [
                    "connectors"
                ],
                "operationId": "deleteconnectors",
                "parameters": [
                    {
                        "name": "ConnectorId",
                        "in": "path",
                        "description": "The key ConnectorId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "connectors deleted",
                        "content": {}
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/connectors('{ConnectorId}')/{propertyName}/$value": {
            "get": {
                "summary": "Return specified property value of specified connectors",
                "description": "Returns property value of connectors object using the specified key and property name.",
                "tags": [
                    "connectors"
                ],
                "operationId": "getconnectorsProperty",
                "parameters": [
                    {
                        "name": "ConnectorId",
                        "in": "path",
                        "description": "The key ConnectorId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "propertyName",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The property name",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The property value",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/files": {
            "get": {
                "summary": "Return files",
                "description": "Returns records from the files entity that match the specified query parameters.  All records will be returned when no parameters are specified.",
                "tags": [
                    "files"
                ],
                "operationId": "getAllfiles",
                "parameters": [
                    {
                        "name": "$select",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "A comma-separated list of properties to include in the results. When this field is left empty, all properties will be returned."
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Order the results by this property in ascending or descending order.  Example for ascending: 'Name ASC' Example for descending: 'Name DESC'"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of results to return."
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "This is the offset of results to skip when returning results."
                    },
                    {
                        "name": "$count",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "When set, the results will return a count of results and not the actual results."
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Use this to filter the results by specific property values. For example, you can use the following filter to retrieve records with the name 'John': $filter=Name eq 'John'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "files response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/files"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            },
            "post": {
                "summary": "Create files",
                "description": "Creates a new files object with the specified parameters.",
                "tags": [
                    "files"
                ],
                "operationId": "createfiles",
                "requestBody": {
                    "description": "The files entity to post",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/files"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "files created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/files"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/files/$count": {
            "get": {
                "summary": "Return count of files",
                "description": "Returns count of records from the files entity that match the specified query parameters.  All count will be returned when no parameters are specified.",
                "tags": [
                    "files"
                ],
                "operationId": "getfilesCount",
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Use this to filter the results by specific property values. For example, you can use the following filter to retrieve records with the name 'John': $filter=Name eq 'John'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The count",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "type": "string",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/files(ConnectorId='{ConnectorId}',Folder='{Folder}',Filename='{Filename}',MessageId='{MessageId}')": {
            "get": {
                "summary": "Return a single files",
                "description": "Returns a single files object using the specified key.",
                "tags": [
                    "files"
                ],
                "operationId": "getfiles",
                "parameters": [
                    {
                        "name": "ConnectorId",
                        "in": "path",
                        "description": "The key ConnectorId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Folder",
                        "in": "path",
                        "description": "The key Folder",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Filename",
                        "in": "path",
                        "description": "The key Filename",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "MessageId",
                        "in": "path",
                        "description": "The key MessageId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "$select",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Select structural property"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "files response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/files"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            },
            "put": {
                "summary": "Update files",
                "description": "Updates the specified files object.",
                "tags": [
                    "files"
                ],
                "operationId": "updatefiles",
                "parameters": [
                    {
                        "name": "ConnectorId",
                        "in": "path",
                        "description": "The key ConnectorId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Folder",
                        "in": "path",
                        "description": "The key Folder",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Filename",
                        "in": "path",
                        "description": "The key Filename",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "MessageId",
                        "in": "path",
                        "description": "The key MessageId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The files entity to update.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/files"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "EntitySet files",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/files"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "files updated",
                        "content": {}
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            },
            "delete": {
                "summary": "Delete files",
                "description": "Deletes the specified files object.",
                "tags": [
                    "files"
                ],
                "operationId": "deletefiles",
                "parameters": [
                    {
                        "name": "ConnectorId",
                        "in": "path",
                        "description": "The key ConnectorId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Folder",
                        "in": "path",
                        "description": "The key Folder",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Filename",
                        "in": "path",
                        "description": "The key Filename",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "MessageId",
                        "in": "path",
                        "description": "The key MessageId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "files deleted",
                        "content": {}
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/files(ConnectorId='{ConnectorId}',Folder='{Folder}',Filename='{Filename}',MessageId='{MessageId}')/{propertyName}/$value": {
            "get": {
                "summary": "Return specified property value of specified files",
                "description": "Returns property value of files object using the specified key and property name.",
                "tags": [
                    "files"
                ],
                "operationId": "getfilesProperty",
                "parameters": [
                    {
                        "name": "ConnectorId",
                        "in": "path",
                        "description": "The key ConnectorId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Folder",
                        "in": "path",
                        "description": "The key Folder",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Filename",
                        "in": "path",
                        "description": "The key Filename",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "MessageId",
                        "in": "path",
                        "description": "The key MessageId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "propertyName",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The property name",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The property value",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/logs": {
            "get": {
                "summary": "Return logs",
                "description": "Returns records from the logs entity that match the specified query parameters.  All records will be returned when no parameters are specified.",
                "tags": [
                    "logs"
                ],
                "operationId": "getAlllogs",
                "parameters": [
                    {
                        "name": "$select",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "A comma-separated list of properties to include in the results. When this field is left empty, all properties will be returned."
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Order the results by this property in ascending or descending order.  Example for ascending: 'Name ASC' Example for descending: 'Name DESC'"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of results to return."
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "This is the offset of results to skip when returning results."
                    },
                    {
                        "name": "$count",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "When set, the results will return a count of results and not the actual results."
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Use this to filter the results by specific property values. For example, you can use the following filter to retrieve records with the name 'John': $filter=Name eq 'John'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "logs response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/logs"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            },
            "post": {
                "summary": "Create a new log entry",
                "description": "Creates a new log entry in the logs entity.",
                "tags": [
                    "logs"
                ],
                "operationId": "createlogs",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/logs"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Log entry created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/logs"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/logs/$count": {
            "get": {
                "summary": "Return count of logs",
                "description": "Returns count of records from the logs entity that match the specified query parameters.  All count will be returned when no parameters are specified.",
                "tags": [
                    "logs"
                ],
                "operationId": "getlogsCount",
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Use this to filter the results by specific property values. For example, you can use the following filter to retrieve records with the name 'John': $filter=Name eq 'John'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The count",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "type": "string",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/logs('{Id}')": {
            "get": {
                "summary": "Return a single logs",
                "description": "Returns a single logs object using the specified key.",
                "tags": [
                    "logs"
                ],
                "operationId": "getlogs",
                "parameters": [
                    {
                        "name": "Id",
                        "in": "path",
                        "description": "The key Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "$select",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Select structural property"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "logs response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/logs"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            },
            "delete": {
                "summary": "Delete logs",
                "description": "Deletes the specified logs object.",
                "tags": [
                    "logs"
                ],
                "operationId": "deletelogs",
                "parameters": [
                    {
                        "name": "Id",
                        "in": "path",
                        "description": "The key Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "logs deleted",
                        "content": {}
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/logs('{Id}')/{propertyName}/$value": {
            "get": {
                "summary": "Return specified property value of specified logs",
                "description": "Returns property value of logs object using the specified key and property name.",
                "tags": [
                    "logs"
                ],
                "operationId": "getlogsProperty",
                "parameters": [
                    {
                        "name": "Id",
                        "in": "path",
                        "description": "The key Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "propertyName",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The property name",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The property value",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/profile": {
            "get": {
                "summary": "Return profile",
                "description": "Returns records from the profile entity that match the specified query parameters.  All records will be returned when no parameters are specified.",
                "tags": [
                    "profile"
                ],
                "operationId": "getAllprofile",
                "parameters": [
                    {
                        "name": "$select",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "A comma-separated list of properties to include in the results. When this field is left empty, all properties will be returned."
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Order the results by this property in ascending or descending order.  Example for ascending: 'Name ASC' Example for descending: 'Name DESC'"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of results to return."
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "This is the offset of results to skip when returning results."
                    },
                    {
                        "name": "$count",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "When set, the results will return a count of results and not the actual results."
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Use this to filter the results by specific property values. For example, you can use the following filter to retrieve records with the name 'John': $filter=Name eq 'John'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "profile response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/profile"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            },
            "put": {
                "summary": "Update profile",
                "description": "Updates the specified profile object.",
                "tags": [
                    "profile"
                ],
                "operationId": "updateprofile",
                "requestBody": {
                    "description": "The profile entity to update. You can update any configuration property by its key name.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "description": "Profile configuration object for OData updates using Pascal case properties",
                                "required": ["@odata.type"],
                                "additionalProperties": true,
                                "properties": {
                                    "@odata.type": {
                                        "type": "string",
                                        "description": "Required OData type identifier",
                                        "enum": ["CDataAPI.Profile"]
                                    },
                                    "NotifyEmailFrom": {
                                        "type": "string",
                                        "description": "The sender of notification emails"
                                    },
                                    "NotifyEmail": {
                                        "type": "string",
                                        "description": "The receiver of notification emails"
                                    },
                                    "NotifyEmailTo": {
                                        "type": "string",
                                        "description": "The receiver of notification emails"
                                    },
                                    "SMTPServer": {
                                        "type": "string",
                                        "description": "The host name or IP address of your SMTP server"
                                    },
                                    "SMTPUser": {
                                        "type": "string",
                                        "description": "The username to authenticate to your SMTP server"
                                    },
                                    "SMTPPort": {
                                        "type": "string",
                                        "description": "The port of your SMTP server"
                                    },
                                    "SMTPSSLMode": {
                                        "type": "string",
                                        "description": "The SSL mode of your SMTP server"
                                    },
                                    "AS4PartyID": {
                                        "type": "string",
                                        "description": "The Party ID for AS4 messaging profile configuration"
                                    },
                                    "SSOEnabled": {
                                        "type": "string",
                                        "description": "Indicates whether Single Sign-On (SSO) is enabled"
                                    },
                                    "ProxyHost": {
                                        "type": "string",
                                        "description": "The host name or IP address of the proxy"
                                    },
                                    "ProxyPort": {
                                        "type": "string",
                                        "description": "The port of your proxy"
                                    },
                                    "ProxyType": {
                                        "type": "string",
                                        "description": "The type of proxy to connect through"
                                    },
                                    "SyslogRemoteHost": {
                                        "type": "string",
                                        "description": "The remote host of sysLog server"
                                    },
                                    "SyslogRemotePort": {
                                        "type": "string",
                                        "description": "The remote port of sysLog server"
                                    },
                                    "UITimeFormat": {
                                        "type": "string",
                                        "description": "Select the time format display preference (12 or 24)"
                                    }
                                },
                                "example": {
                                    "@odata.type": "CDataAPI.Profile",
                                    "NotifyEmail": "foo@bar.com",
                                    "NotifyEmailFrom": "admin@example.com",
                                    "SMTPServer": "smtp.gmail.com",
                                    "AS4PartyID": "mycompany"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "profile updated",
                        "content": {}
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/profile/$count": {
            "get": {
                "summary": "Return count of profile",
                "description": "Returns count of records from the profile entity that match the specified query parameters.  All count will be returned when no parameters are specified.",
                "tags": [
                    "profile"
                ],
                "operationId": "getprofileCount",
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Use this to filter the results by specific property values. For example, you can use the following filter to retrieve records with the name 'John': $filter=Name eq 'John'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The count",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "type": "string",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/reports": {
            "get": {
                "summary": "Return reports",
                "description": "Returns records from the reports entity that match the specified query parameters.  All records will be returned when no parameters are specified.",
                "tags": [
                    "reports"
                ],
                "operationId": "getAllreports",
                "parameters": [
                    {
                        "name": "$select",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "A comma-separated list of properties to include in the results. When this field is left empty, all properties will be returned."
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Order the results by this property in ascending or descending order.  Example for ascending: 'Name ASC' Example for descending: 'Name DESC'"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of results to return."
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "This is the offset of results to skip when returning results."
                    },
                    {
                        "name": "$count",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "When set, the results will return a count of results and not the actual results."
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Use this to filter the results by specific property values. For example, you can use the following filter to retrieve records with the name 'John': $filter=Name eq 'John'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "reports response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/reports"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            },
            "post": {
                "summary": "Create reports",
                "description": "Creates a new reports object with the specified parameters.",
                "tags": [
                    "reports"
                ],
                "operationId": "createreports",
                "requestBody": {
                    "description": "The reports entity to post",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/reports"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "reports created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/reports"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/reports/$count": {
            "get": {
                "summary": "Return count of reports",
                "description": "Returns count of records from the reports entity that match the specified query parameters.  All count will be returned when no parameters are specified.",
                "tags": [
                    "reports"
                ],
                "operationId": "getreportsCount",
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Use this to filter the results by specific property values. For example, you can use the following filter to retrieve records with the name 'John': $filter=Name eq 'John'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The count",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "type": "string",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/requests": {
            "get": {
                "summary": "Return requests",
                "description": "Returns records from the requests entity that match the specified query parameters.  All records will be returned when no parameters are specified.",
                "tags": [
                    "requests"
                ],
                "operationId": "getAllrequests",
                "parameters": [
                    {
                        "name": "$select",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "A comma-separated list of properties to include in the results. When this field is left empty, all properties will be returned."
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Order the results by this property in ascending or descending order.  Example for ascending: 'Name ASC' Example for descending: 'Name DESC'"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of results to return."
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "This is the offset of results to skip when returning results."
                    },
                    {
                        "name": "$count",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "When set, the results will return a count of results and not the actual results."
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Use this to filter the results by specific property values. For example, you can use the following filter to retrieve records with the name 'John': $filter=Name eq 'John'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "requests response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/requests"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/requests/$count": {
            "get": {
                "summary": "Return count of requests",
                "description": "Returns count of records from the requests entity that match the specified query parameters.  All count will be returned when no parameters are specified.",
                "tags": [
                    "requests"
                ],
                "operationId": "getrequestsCount",
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Use this to filter the results by specific property values. For example, you can use the following filter to retrieve records with the name 'John': $filter=Name eq 'John'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The count",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "type": "string",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/requests('{Id}')": {
            "get": {
                "summary": "Return a single requests",
                "description": "Returns a single requests object using the specified key.",
                "tags": [
                    "requests"
                ],
                "operationId": "getrequests",
                "parameters": [
                    {
                        "name": "Id",
                        "in": "path",
                        "description": "The key Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "$select",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Select structural property"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "requests response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/requests"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            },
            "delete": {
                "summary": "Delete requests",
                "description": "Deletes the specified requests object.",
                "tags": [
                    "requests"
                ],
                "operationId": "deleterequests",
                "parameters": [
                    {
                        "name": "Id",
                        "in": "path",
                        "description": "The key Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "requests deleted",
                        "content": {}
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/requests('{Id}')/{propertyName}/$value": {
            "get": {
                "summary": "Return specified property value of specified requests",
                "description": "Returns property value of requests object using the specified key and property name.",
                "tags": [
                    "requests"
                ],
                "operationId": "getrequestsProperty",
                "parameters": [
                    {
                        "name": "Id",
                        "in": "path",
                        "description": "The key Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "propertyName",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The property name",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The property value",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/transactions": {
            "get": {
                "summary": "Return transactions",
                "description": "Returns records from the transactions entity that match the specified query parameters.  All records will be returned when no parameters are specified.",
                "tags": [
                    "transactions"
                ],
                "operationId": "getAlltransactions",
                "parameters": [
                    {
                        "name": "$select",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "A comma-separated list of properties to include in the results. When this field is left empty, all properties will be returned."
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Order the results by this property in ascending or descending order.  Example for ascending: 'Name ASC' Example for descending: 'Name DESC'"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of results to return."
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "This is the offset of results to skip when returning results."
                    },
                    {
                        "name": "$count",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "When set, the results will return a count of results and not the actual results."
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Use this to filter the results by specific property values. For example, you can use the following filter to retrieve records with the name 'John': $filter=Name eq 'John'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "transactions response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/transactions"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/transactions/$count": {
            "get": {
                "summary": "Return count of transactions",
                "description": "Returns count of records from the transactions entity that match the specified query parameters.  All count will be returned when no parameters are specified.",
                "tags": [
                    "transactions"
                ],
                "operationId": "gettransactionsCount",
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Use this to filter the results by specific property values. For example, you can use the following filter to retrieve records with the name 'John': $filter=Name eq 'John'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The count",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "type": "string",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/transactions('{Id}')": {
            "get": {
                "summary": "Return a single transactions",
                "description": "Returns a single transactions object using the specified key.",
                "tags": [
                    "transactions"
                ],
                "operationId": "gettransactions",
                "parameters": [
                    {
                        "name": "Id",
                        "in": "path",
                        "description": "The key Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "$select",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Select structural property"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "transactions response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/transactions"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            },
            "delete": {
                "summary": "Delete transactions",
                "description": "Deletes the specified transactions object.",
                "tags": [
                    "transactions"
                ],
                "operationId": "deletetransactions",
                "parameters": [
                    {
                        "name": "Id",
                        "in": "path",
                        "description": "The key Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "transactions deleted",
                        "content": {}
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/transactions('{Id}')/{propertyName}/$value": {
            "get": {
                "summary": "Return specified property value of specified transactions",
                "description": "Returns property value of transactions object using the specified key and property name.",
                "tags": [
                    "transactions"
                ],
                "operationId": "gettransactionsProperty",
                "parameters": [
                    {
                        "name": "Id",
                        "in": "path",
                        "description": "The key Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "propertyName",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The property name",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The property value",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/vault": {
            "get": {
                "summary": "Return vault",
                "description": "Returns records from the vault entity that match the specified query parameters.  All records will be returned when no parameters are specified.",
                "tags": [
                    "vault"
                ],
                "operationId": "getAllvault",
                "parameters": [
                    {
                        "name": "$select",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "A comma-separated list of properties to include in the results. When this field is left empty, all properties will be returned."
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Order the results by this property in ascending or descending order.  Example for ascending: 'Name ASC' Example for descending: 'Name DESC'"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of results to return."
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "This is the offset of results to skip when returning results."
                    },
                    {
                        "name": "$count",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "When set, the results will return a count of results and not the actual results."
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Use this to filter the results by specific property values. For example, you can use the following filter to retrieve records with the name 'John': $filter=Name eq 'John'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "vault response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/vault"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            },
            "post": {
                "summary": "Create vault",
                "description": "Creates a new vault object with the specified parameters.",
                "tags": [
                    "vault"
                ],
                "operationId": "createvault",
                "requestBody": {
                    "description": "The vault entity to post",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/vault"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "vault created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vault"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/vault/$count": {
            "get": {
                "summary": "Return count of vault",
                "description": "Returns count of records from the vault entity that match the specified query parameters.  All count will be returned when no parameters are specified.",
                "tags": [
                    "vault"
                ],
                "operationId": "getvaultCount",
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Use this to filter the results by specific property values. For example, you can use the following filter to retrieve records with the name 'John': $filter=Name eq 'John'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The count",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "type": "string",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/vault('{Id}')": {
            "get": {
                "summary": "Return a single vault",
                "description": "Returns a single vault object using the specified key.",
                "tags": [
                    "vault"
                ],
                "operationId": "getvault",
                "parameters": [
                    {
                        "name": "Id",
                        "in": "path",
                        "description": "The key Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "$select",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Select structural property"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "vault response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vault"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            },
            "put": {
                "summary": "Update vault",
                "description": "Updates the specified vault object.",
                "tags": [
                    "vault"
                ],
                "operationId": "updatevault",
                "parameters": [
                    {
                        "name": "Id",
                        "in": "path",
                        "description": "The key Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The vault entity to update.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/vault"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "EntitySet vault",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vault"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "vault updated",
                        "content": {}
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            },
            "delete": {
                "summary": "Delete vault",
                "description": "Deletes the specified vault object.",
                "tags": [
                    "vault"
                ],
                "operationId": "deletevault",
                "parameters": [
                    {
                        "name": "Id",
                        "in": "path",
                        "description": "The key Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "vault deleted",
                        "content": {}
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/vault('{Id}')/{propertyName}/$value": {
            "get": {
                "summary": "Return specified property value of specified vault",
                "description": "Returns property value of vault object using the specified key and property name.",
                "tags": [
                    "vault"
                ],
                "operationId": "getvaultProperty",
                "parameters": [
                    {
                        "name": "Id",
                        "in": "path",
                        "description": "The key Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "propertyName",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The property name",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The property value",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/workspaces": {
            "get": {
                "summary": "Return workspaces",
                "description": "Returns records from the workspaces entity that match the specified query parameters.  All records will be returned when no parameters are specified.",
                "tags": [
                    "workspaces"
                ],
                "operationId": "getAllworkspaces",
                "parameters": [
                    {
                        "name": "$select",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "A comma-separated list of properties to include in the results. When this field is left empty, all properties will be returned."
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Order the results by this property in ascending or descending order.  Example for ascending: 'Name ASC' Example for descending: 'Name DESC'"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of results to return."
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "This is the offset of results to skip when returning results."
                    },
                    {
                        "name": "$count",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "When set, the results will return a count of results and not the actual results."
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Use this to filter the results by specific property values. For example, you can use the following filter to retrieve records with the name 'John': $filter=Name eq 'John'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "workspaces response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/workspaces"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            },
            "post": {
                "summary": "Create workspaces",
                "description": "Creates a new workspaces object with the specified parameters.",
                "tags": [
                    "workspaces"
                ],
                "operationId": "createworkspaces",
                "requestBody": {
                    "description": "The workspaces entity to post",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/workspaces"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "workspaces created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/workspaces"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/workspaces/$count": {
            "get": {
                "summary": "Return count of workspaces",
                "description": "Returns count of records from the workspaces entity that match the specified query parameters.  All count will be returned when no parameters are specified.",
                "tags": [
                    "workspaces"
                ],
                "operationId": "getworkspacesCount",
                "parameters": [
                    {
                        "name": "$filter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Use this to filter the results by specific property values. For example, you can use the following filter to retrieve records with the name 'John': $filter=Name eq 'John'"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The count",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "type": "string",
                                    "format": "int32"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/workspaces('{Workspaceid}')": {
            "get": {
                "summary": "Return a single workspaces",
                "description": "Returns a single workspaces object using the specified key.",
                "tags": [
                    "workspaces"
                ],
                "operationId": "getworkspaces",
                "parameters": [
                    {
                        "name": "Workspaceid",
                        "in": "path",
                        "description": "The key Workspaceid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "$select",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Select structural property"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "workspaces response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/workspaces"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            },
            "put": {
                "summary": "Update workspaces",
                "description": "Updates the specified workspaces object.",
                "tags": [
                    "workspaces"
                ],
                "operationId": "updateworkspaces",
                "parameters": [
                    {
                        "name": "Workspaceid",
                        "in": "path",
                        "description": "The key Workspaceid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The workspaces entity to update.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/workspaces"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "EntitySet workspaces",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/workspaces"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "workspaces updated",
                        "content": {}
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            },
            "delete": {
                "summary": "Delete workspaces",
                "description": "Deletes the specified workspaces object.",
                "tags": [
                    "workspaces"
                ],
                "operationId": "deleteworkspaces",
                "parameters": [
                    {
                        "name": "Workspaceid",
                        "in": "path",
                        "description": "The key Workspaceid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "workspaces deleted",
                        "content": {}
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/workspaces('{Workspaceid}')/{propertyName}/$value": {
            "get": {
                "summary": "Return specified property value of specified workspaces",
                "description": "Returns property value of workspaces object using the specified key and property name.",
                "tags": [
                    "workspaces"
                ],
                "operationId": "getworkspacesProperty",
                "parameters": [
                    {
                        "name": "Workspaceid",
                        "in": "path",
                        "description": "The key Workspaceid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "propertyName",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The property name",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The property value",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "text/plain; charset=utf-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/cleanup": {
            "post": {
                "summary": "Cleans up log files for the specified workspaces and connectors.",
                "description": "Cleans up log files for the specified workspaces and connectors.",
                "tags": [
                    "cleanup"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/cleanup_input"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The action result"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/copyConnector": {
            "post": {
                "summary": "This action will copy the connector settings to a new connector based on the newly specified Id.",
                "description": "This action will copy the connector settings to a new connector based on the newly specified Id.",
                "tags": [
                    "copyConnector"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/copyConnector_input"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The action result",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/copyConnector_output"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/copyWorkspace": {
            "post": {
                "summary": "This action will copy all connectors from the specified WorkspaceId to a new workspace.",
                "description": "This action will copy all connectors from the specified WorkspaceId to a new workspace.",
                "tags": [
                    "copyWorkspace"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/copyWorkspace_input"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The action result",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/copyWorkspace_output"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/createCert": {
            "post": {
                "summary": "Create the public/private certificate key pair.",
                "description": "Create the public/private certificate key pair.",
                "tags": [
                    "createCert"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createCert_input"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The action result",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/createCert_output"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/exchangeCert": {
            "post": {
                "summary": "Exchange the specified certificate.",
                "description": "Exchange the specified certificate.",
                "tags": [
                    "exchangeCert"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/exchangeCert_input"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The action result"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/export": {
            "post": {
                "summary": "Export the connector settings.",
                "description": "Export the connector settings.",
                "tags": [
                    "export"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/export_input"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The action result",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/export_output"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/getMessageCount": {
            "post": {
                "summary": "Get the unsend messages count of each connector.",
                "description": "Get the unsend messages count of each connector.",
                "tags": [
                    "getMessageCount"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/getMessageCount_input"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The action result",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/getMessageCount_output"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/getTransactionLogs": {
            "post": {
                "summary": "Retrieves the transaction details of the application.",
                "description": "Retrieves the transaction details of the application.",
                "tags": [
                    "getTransactionLogs"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/getTransactionLogs_input"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The action result",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/getTransactionLogs_output"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/import": {
            "post": {
                "summary": "This action will import partner/connector profiles from previous versions of the application.",
                "description": "This action will import partner/connector profiles from previous versions of the application.",
                "tags": [
                    "import"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/import_input"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The action result"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/receiveFile": {
            "post": {
                "summary": "Download files for this connector.",
                "description": "Download files for this connector.",
                "tags": [
                    "receiveFile"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/receiveFile_input"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The action result",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/receiveFile_output"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        },
        "/sendFile": {
            "post": {
                "summary": "Sends a file using the specified connector.",
                "description": "Sends a file using the specified connector.",
                "tags": [
                    "sendFile"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/sendFile_input"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The action result",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/sendFile_output"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CDataError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    },
                    {
                        "authtoken_header": []
                    },
                    {
                        "authtoken_query": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "certificates": {
                "type": "object",
                "properties": {
                    "Name": {
                        "description": "The name of the certificate file.",
                        "type": "string"
                    },
                    "Data": {
                        "description": "The base-64 encoded contents of the certificate file.",
                        "type": "string"
                    },
                    "StoreType": {
                        "description": "The store type.",
                        "type": "string"
                    },
                    "Subject": {
                        "description": "The certificate subject.",
                        "type": "string"
                    },
                    "Issuer": {
                        "description": "The issuer of the certificate.",
                        "type": "string"
                    },
                    "IssuedTo": {
                        "description": "The common name of certificate subject.",
                        "type": "string"
                    },
                    "IssuedBy": {
                        "description": "The common name of certificate issuer.",
                        "type": "string"
                    },
                    "EffectiveDate": {
                        "description": "The effective date of the certificate.",
                        "type": "string"
                    },
                    "ExpirationDate": {
                        "description": "The expiration date of the certificate.",
                        "type": "string"
                    },
                    "ExpirationDays": {
                        "description": "The days until the expiration date of the certificate.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "Serialnumber": {
                        "description": "The serial number of the certificate.",
                        "type": "string"
                    },
                    "Thumbprint": {
                        "description": "The SHA1 thumbprint of the certificate.",
                        "type": "string"
                    },
                    "Keysize": {
                        "description": "The key size of the certificate.",
                        "type": "string"
                    },
                    "SignatureAlgorithm": {
                        "description": "The algorithm used to sign the certificate.",
                        "type": "string"
                    },
                    "ConnectorIds": {
                        "description": "The Id list of the connector configured to use the certificate.",
                        "type": "string"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "connectors": {
                "type": "object",
                "properties": {
                    "ConnectorId": {
                        "description": "The id of the connector.",
                        "type": "string"
                    },
                    "WorkspaceId": {
                        "description": "The workspace of the connector.",
                        "type": "string"
                    },
                    "ConnectorType": {
                        "description": "The type of the connector.",
                        "type": "string"
                    },
                    "AutomationSend": {
                        "description": "When set to True, the connector will automatically process files in the Send folder.",
                        "type": "boolean"
                    },
                    "AutomationRetryInterval": {
                        "description": "The length of time that the application will wait after an error, in minutes, before attempting to send the file again. If set to 0, the connector will attempt to retry the file every interval.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "AutomationMaxAttempts": {
                        "description": "The maximum number of times that the connector will attempt to process the input file in the event that failures are encountered. If set to 0, the connector will attempt to retry the file indefinitely.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "AutomationReceive": {
                        "description": "When set to True, the connector will attempt to automatically receive files at the specified ReceiveInterval.",
                        "type": "boolean"
                    },
                    "ReceiveInterval": {
                        "description": "The interval at which the connector will attempt to receive files if AutomationReceive is set to True.",
                        "type": "string"
                    },
                    "MaxWorkers": {
                        "description": "The maximum number of workers to assign from the worker pool when processing files on this connector. If not set, the default setting from the Settings tab of the application will be used.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "MaxFiles": {
                        "description": "The maximum number of files that will be processed for this connector each time workers are assigned to this connector. If not set, the default setting from the Settings tab of the application will be used.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "SendFolder": {
                        "description": "This is the folder where the connector will pick up files to be processed.",
                        "type": "string"
                    },
                    "ReceiveFolder": {
                        "description": "This is the folder where the connector will place received files.",
                        "type": "string"
                    },
                    "SentFolder": {
                        "description": "This is the folder where the connector will place files after they have been processed.",
                        "type": "string"
                    },
                    "SaveToSentFolder": {
                        "description": "When set to True, the connector will keep a copy of sent messages in the Sent folder.",
                        "type": "boolean"
                    },
                    "SentFolderScheme": {
                        "description": "This setting governs the subfolder structure that is used within the Sent folder. Available values are Daily, Weekly, Monthly, and Yearly.",
                        "type": "string"
                    },
                    "LogLevel": {
                        "description": "The log level used when writing transcation logs. Available values are None, Error, Warning, Info, Debug, and Trace.",
                        "type": "string"
                    },
                    "LogSubFolderScheme": {
                        "description": "This setting governs the subfolder structure that is used within the Logs folder. Available values are Daily, Weekly, Monthly, and Yearly.",
                        "type": "string"
                    },
                    "LogMessages": {
                        "description": "When checked, the connector will keep a copy of the message next to the logs for the message in the Logs directory.",
                        "type": "boolean"
                    }
                },
                "required": [
                    "ConnectorId"
                ]
            },
            "files": {
                "type": "object",
                "properties": {
                    "ConnectorId": {
                        "description": "The id of the connector.",
                        "type": "string"
                    },
                    "PortId": {
                        "description": "The id of the port.",
                        "type": "string"
                    },
                    "Folder": {
                        "description": "The folder of the file.",
                        "type": "string"
                    },
                    "Filename": {
                        "description": "The name of the file.",
                        "type": "string"
                    },
                    "MessageId": {
                        "description": "The message id of the file. This will only have a value if the file is a message.",
                        "type": "string"
                    },
                    "Subfolder": {
                        "description": "The subfolder of the file.",
                        "type": "string"
                    },
                    "TimeCreated": {
                        "description": "The time the file was created.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "FilePath": {
                        "description": "The full path to the file.",
                        "type": "string"
                    },
                    "FileSize": {
                        "description": "The size of the file.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "Content": {
                        "description": "The Base64 encode file contents. This will only be returned when a specific file is requested. This field cannot be used when filtering results using the $filter parameter.",
                        "type": "string"
                    },
                    "BatchGroupId": {
                        "description": "The batch group message Id.",
                        "type": "string"
                    },
                    "IsBatchGroup": {
                        "description": "Whether it is a batch group message or not?",
                        "type": "boolean"
                    }
                },
                "required": [
                    "ConnectorId",
                    "Folder",
                    "Filename",
                    "MessageId"
                ]
            },
            "logs": {
                "type": "object",
                "properties": {
                    "Id": {
                        "description": "The Id of the log message.",
                        "type": "string"
                    },
                    "Type": {
                        "description": "The type of the log message.",
                        "type": "string"
                    },
                    "Timestamp": {
                        "description": "The time when the event occurred.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "Script": {
                        "description": "The app causing the error.",
                        "type": "string"
                    },
                    "Message": {
                        "description": "The message.",
                        "type": "string"
                    },
                    "InstanceId": {
                        "description": "The host which writes the log in the HA environment.",
                        "type": "string"
                    }
                },
                "required": [
                    "Id"
                ]
            },
            "profile": {
                "type": "object",
                "description": "System configuration profile containing all application settings",
                "additionalProperties": {
                    "type": "string",
                    "description": "Configuration setting value"
                },
                "properties": {
                    "@odata.context": {
                        "type": "string",
                        "description": "OData context metadata"
                    },
                    "as4:partyid": {
                        "type": "string",
                        "description": "The Party ID for AS4 messaging profile configuration"
                    },
                    "as4:partyidtype": {
                        "type": "string",
                        "description": "The Party ID type for AS4 messaging profile configuration"
                    },
                    "notifyemailfrom": {
                        "type": "string",
                        "description": "The sender of notification emails"
                    },
                    "notifyemailto": {
                        "type": "string",
                        "description": "The receiver of notification emails"
                    },
                    "smtpserver": {
                        "type": "string",
                        "description": "The host name or IP address of your SMTP server"
                    },
                    "smtpuser": {
                        "type": "string",
                        "description": "The username to authenticate to your SMTP server"
                    },
                    "smtppassword": {
                        "type": "string",
                        "description": "The password to authenticate to your SMTP server"
                    },
                    "smtpport": {
                        "type": "string",
                        "description": "The port of your SMTP server"
                    },
                    "smtpsslmode": {
                        "type": "string",
                        "description": "The SSL mode of your SMTP server"
                    },
                    "ssoenabled": {
                        "type": "string",
                        "description": "Indicates whether Single Sign-On (SSO) is enabled"
                    },
                    "proxyhost": {
                        "type": "string",
                        "description": "The host name or IP address of the proxy"
                    },
                    "proxyport": {
                        "type": "string",
                        "description": "The port of your proxy"
                    },
                    "proxytype": {
                        "type": "string",
                        "description": "The type of proxy to connect through"
                    },
                    "syslogremotehost": {
                        "type": "string",
                        "description": "The remote host of sysLog server"
                    },
                    "syslogremoteport": {
                        "type": "string",
                        "description": "The remote port of sysLog server"
                    },
                    "uitimeformat": {
                        "type": "string",
                        "description": "Select the time format display preference"
                    }
                }
            },
            "reports": {
                "type": "object",
                "properties": {
                    "Name": {
                        "description": "The name of the report.",
                        "type": "string"
                    },
                    "Type": {
                        "description": "The type of report.",
                        "type": "string"
                    },
                    "CreatedBy": {
                        "description": "Who created this report.",
                        "type": "string"
                    },
                    "CreatedTime": {
                        "description": "The time when created this report.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "ModifiedTime": {
                        "description": "The last modified time of report.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "TimePeriod": {
                        "description": "The time period that the report should pull data from. In days.",
                        "type": "string"
                    },
                    "Columns": {
                        "description": "The columns in the report.",
                        "type": "string"
                    },
                    "GroupRows": {
                        "description": "The rows to group by in the report.",
                        "type": "string"
                    },
                    "Filters": {
                        "description": "Any filters that should be used for the report. e.g. ConnectorType=SFTP,FTP;ConnectorId=SFTP1,SFTP2,FTP1,FTP2",
                        "type": "string"
                    },
                    "Summary": {
                        "description": "Any summary information that should be provided in the generated report.",
                        "type": "string"
                    },
                    "Schedule": {
                        "description": "The schedule cron.",
                        "type": "string"
                    },
                    "StartDate": {
                        "description": "The start date.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "EndDate": {
                        "description": "The end date.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "Format": {
                        "description": "The report format.",
                        "type": "string"
                    },
                    "EmailReport": {
                        "description": "Whether send report via email.",
                        "type": "boolean"
                    },
                    "EmailSubject": {
                        "description": "The email subject.",
                        "type": "string"
                    },
                    "EmailRecipients": {
                        "description": "The email recipients.",
                        "type": "string"
                    },
                    "TimePeriodStart": {
                        "description": "The custom TimePeriod start time.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "TimePeriodEnd": {
                        "description": "The custom TimePeriod end time.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "NextRunTime": {
                        "description": "The next schedule time.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "IsRunning": {
                        "description": "Whether the reports is running.",
                        "type": "string"
                    }
                }
            },
            "requests": {
                "type": "object",
                "properties": {
                    "Id": {
                        "description": "The Id of the request.",
                        "type": "string"
                    },
                    "Timestamp": {
                        "description": "The time when the request was handled.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "URL": {
                        "description": "The URL of the request.",
                        "type": "string"
                    },
                    "Method": {
                        "description": "The HTTP method.",
                        "type": "string"
                    },
                    "User": {
                        "description": "The user.",
                        "type": "string"
                    },
                    "RemoteIP": {
                        "description": "The remote IP address from the request.",
                        "type": "string"
                    },
                    "Script": {
                        "description": "The script.",
                        "type": "string"
                    },
                    "Bytes": {
                        "description": "The size of the request.",
                        "type": "integer",
                        "format": "int64"
                    },
                    "Time": {
                        "description": "The time of the request.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "Error": {
                        "description": "The error of the request.",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the request.",
                        "type": "string"
                    },
                    "InstanceId": {
                        "description": "The host which writes the log in the HA environment.",
                        "type": "string"
                    }
                },
                "required": [
                    "Id"
                ]
            },
            "transactions": {
                "type": "object",
                "properties": {
                    "Id": {
                        "description": "The id of the logs.",
                        "type": "string"
                    },
                    "ConnectorId": {
                        "description": "The id of the connector.",
                        "type": "string"
                    },
                    "PortId": {
                        "description": "The id of the port.",
                        "type": "string"
                    },
                    "WorkspaceId": {
                        "description": "The id of the workspace.",
                        "type": "string"
                    },
                    "Workspace": {
                        "description": "The id of the workspace.",
                        "type": "string"
                    },
                    "MessageId": {
                        "description": "The message Id.",
                        "type": "string"
                    },
                    "Direction": {
                        "description": "The direction of the file transaction.",
                        "type": "string"
                    },
                    "Status": {
                        "description": "The status of the transaction.",
                        "type": "string"
                    },
                    "Filename": {
                        "description": "The name of the file being transferred.",
                        "type": "string"
                    },
                    "FilePath": {
                        "description": "The full path to the file that was sent or received.",
                        "type": "string"
                    },
                    "FileSize": {
                        "description": "The size of the file.",
                        "type": "integer",
                        "format": "int32"
                    },
                    "Timestamp": {
                        "description": "The time that the file was sent or received.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "ETag": {
                        "description": "The ETag for the file being transferred. This is only available when using AS2 Restart.",
                        "type": "string"
                    },
                    "InstanceId": {
                        "description": "The host which writes the log in the HA environment.",
                        "type": "string"
                    },
                    "BatchGroupId": {
                        "description": "The batch group message Id.",
                        "type": "string"
                    },
                    "IsBatchGroup": {
                        "description": "Whether it is a batch group message or not?",
                        "type": "boolean"
                    },
                    "ProcessingTime": {
                        "description": "The total time taken to process the transaction, measured in milliseconds (ms).",
                        "type": "integer",
                        "format": "int64"
                    },
                    "ConnectorType": {
                        "description": "The ConnectorType about the current connector.",
                        "type": "string"
                    }
                },
                "required": [
                    "Id"
                ]
            },
            "vault": {
                "type": "object",
                "properties": {
                    "Id": {
                        "description": "The vault setting id.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "The vault setting name.",
                        "type": "string"
                    },
                    "Type": {
                        "description": "The vault setting type.",
                        "type": "string"
                    },
                    "ShowType": {
                        "description": "Whether output type or displayName.",
                        "type": "string"
                    },
                    "Tags": {
                        "description": "The vault setting tags.",
                        "type": "string"
                    },
                    "Value": {
                        "description": "The vault setting value.",
                        "type": "string"
                    }
                },
                "required": [
                    "Id"
                ]
            },
            "workspaces": {
                "type": "object",
                "properties": {
                    "Workspaceid": {
                        "description": "The Id of the workspace.",
                        "type": "string"
                    }
                },
                "required": [
                    "Workspaceid"
                ]
            },
            "cleanup_input": {
                "type": "object",
                "properties": {
                    "Type": {
                        "type": "string",
                        "description": "Whether to Archive or Delete files when performing the cleanup. If not specified, the cleanup settings specified in the application will be used."
                    },
                    "Age": {
                        "type": "string",
                        "description": "Minimum age of the files to be cleaned up, in days. Files more recent than the specified age will not be cleaned up. If not specified, the cleanup settings specified in the application will be used."
                    },
                    "WorkspaceId": {
                        "type": "string",
                        "description": "The Id of the workspace. If not set, all workspaces will be cleaned up."
                    },
                    "ConnectorId": {
                        "type": "string",
                        "description": "The Id of the connector to be archived. If not set, all connectors in the applicable workspace(s) will be cleaned up."
                    }
                }
            },
            "copyConnector_input": {
                "type": "object",
                "required": [
                    "WorkspaceId",
                    "ConnectorId",
                    "NewConnectorId"
                ],
                "properties": {
                    "WorkspaceId": {
                        "type": "string",
                        "description": "The Id of the workspace."
                    },
                    "ConnectorId": {
                        "type": "string",
                        "description": "The Id of the connector to copy."
                    },
                    "NewWorkspaceId": {
                        "type": "string",
                        "description": "The Id of the new workspace.  If unspecified, the workspace of the original connector will be used."
                    },
                    "NewConnectorId": {
                        "type": "string",
                        "description": "The Id of the new connector."
                    }
                }
            },
            "copyConnector_output": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "AllowedPrivileges": {
                            "type": "string",
                            "description": "The connector privileges."
                        }
                    }
                }
            },
            "copyWorkspace_input": {
                "type": "object",
                "required": [
                    "WorkspaceId",
                    "NewWorkspaceId",
                    "ConnectorIdSuffix"
                ],
                "properties": {
                    "WorkspaceId": {
                        "type": "string",
                        "description": "The Id of the workspace."
                    },
                    "NewWorkspaceId": {
                        "type": "string",
                        "description": "The Id of the new workspace."
                    },
                    "ConnectorIdSuffix": {
                        "type": "string",
                        "description": "This suffix will be added to the end of the copied ConnectorIds"
                    }
                }
            },
            "copyWorkspace_output": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "Count": {
                            "type": "string",
                            "description": "Number of copied Connectors."
                        }
                    }
                }
            },
            "createCert_input": {
                "type": "object",
                "required": [
                    "Filename",
                    "CommonName",
                    "Serialnumber",
                    "Password"
                ],
                "properties": {
                    "Filename": {
                        "type": "string",
                        "description": "The file name."
                    },
                    "CommonName": {
                        "type": "string",
                        "description": "The common name."
                    },
                    "Serialnumber": {
                        "type": "string",
                        "description": "The serial number."
                    },
                    "Password": {
                        "type": "string",
                        "description": "The password."
                    },
                    "Country": {
                        "type": "string",
                        "description": "The country."
                    },
                    "Email": {
                        "type": "string",
                        "description": "The email."
                    },
                    "Expiration": {
                        "type": "string",
                        "description": "The expiration (in years).",
                        "default": "1"
                    },
                    "KeySize": {
                        "type": "string",
                        "description": "The key size.",
                        "default": "2048"
                    },
                    "PublicKeyType": {
                        "type": "string",
                        "description": "The public key type.",
                        "default": "X.509"
                    },
                    "SignatureAlgorithm": {
                        "type": "string",
                        "description": "The signature algorithm.",
                        "default": "SHA256"
                    },
                    "Locality": {
                        "type": "string",
                        "description": "The locality."
                    },
                    "Organization": {
                        "type": "string",
                        "description": "The organization."
                    },
                    "OrganizationalUnit": {
                        "type": "string",
                        "description": "The organizational unit."
                    },
                    "State": {
                        "type": "string",
                        "description": "The state."
                    }
                }
            },
            "createCert_output": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "Name": {
                            "type": "string",
                            "description": "The file name."
                        },
                        "Password": {
                            "type": "string",
                            "description": "The password."
                        },
                        "Pubname": {
                            "type": "string",
                            "description": "The public cert file name."
                        }
                    }
                }
            },
            "exchangeCert_input": {
                "type": "object",
                "required": [
                    "Certificate",
                    "ExchangeType"
                ],
                "properties": {
                    "WorkspaceId": {
                        "type": "string",
                        "description": "The workspace id. Required."
                    },
                    "ConnectorId": {
                        "type": "string",
                        "description": "The connector id. Required."
                    },
                    "PortId": {
                        "type": "string",
                        "description": "The port id."
                    },
                    "Certificate": {
                        "type": "string",
                        "description": "The certificate to exchange."
                    },
                    "ExchangeType": {
                        "type": "string",
                        "description": "The exchange type. Validate values are AS2(Request, Response), OFTP(Deliver, Request, Replace)"
                    },
                    "CertificatePassword": {
                        "type": "string",
                        "description": "The password of certificate(AS2)."
                    },
                    "CertificateUsage": {
                        "type": "string",
                        "description": "The cryptographic function(s) for the certificate. Validate values are 'Encryption,Verification,ServerTLS,ClientTLS'(AS2)."
                    },
                    "ResponseURL": {
                        "type": "string",
                        "description": "The URL which the response should be sent(AS2)."
                    },
                    "RequestId": {
                        "type": "string",
                        "description": "The Request id(AS2)."
                    }
                }
            },
            "export_input": {
                "type": "object",
                "properties": {
                    "WorkspaceId": {
                        "type": "string",
                        "description": "The Id of the workspace to export. If unspecified, it's default."
                    },
                    "ConnectorId#": {
                        "type": "string",
                        "description": "The Id of the connector to export. If unspecified, all connectors will be exported. If the connector doesn't exist in the specified workspace, an error will be thrown. "
                    },
                    "FlowAPI#": {
                        "type": "string",
                        "description": "The Id of the flow API. "
                    },
                    "IncludeProfile": {
                        "type": "string",
                        "description": "Whether profile related settings should be included in the exported arcflow."
                    },
                    "FlowPassword": {
                        "type": "string",
                        "description": "The password for encrypting sensitive values."
                    },
                    "GlobalSettings": {
                        "type": "string",
                        "description": "The global settings that should be included in the export. One or more of the following values may be provided using a comma-separated string, or the special value \u201cALL\u201d can be used to export all global settings. Values: Partners, Documents, Users, Roles, Certificates, Connections, Vaults, Reports, Alerts, Advanced, AdminAPI, SSO."
                    },
                    "ProfileSettings": {
                        "type": "string",
                        "description": "The profiles that should be included in the export. One or more of the following values may be provided using a comma-separated string. The special value \u201cMATCHING\u201d can be used to export the matching profiles for the connectors included in the export. Values: AS2, AS4, GISB, RosettaNet, FTPServer, SFTPServer, HL7MLLP, OFTP."
                    }
                }
            },
            "export_output": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "Arcflow": {
                            "type": "string",
                            "description": "The base64 encoded content of the exported arcflow."
                        }
                    }
                }
            },
            "getMessageCount_input": {
                "type": "object",
                "properties": {
                    "WorkspaceId": {
                        "type": "string",
                        "description": "When set, the API will return the count of pending messages for the specified workspace.  When left empty, all connectors will be returned from all workspaces."
                    },
                    "ConnectorId": {
                        "type": "string",
                        "description": "The Ids of the Connector."
                    }
                }
            },
            "getMessageCount_output": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "ConnectorId": {
                            "type": "string",
                            "description": "The Id of the Connector."
                        },
                        "Count": {
                            "type": "string",
                            "description": "The count of pending messages for the connector.  This value will be the count of all messages in the Send folder."
                        },
                        "Workspace": {
                            "type": "string",
                            "description": "The connector's workspace."
                        }
                    }
                }
            },
            "getTransactionLogs_input": {
                "type": "object",
                "required": [
                    "MessageId",
                    "Direction"
                ],
                "properties": {
                    "WorkspaceId": {
                        "type": "string",
                        "description": "The id of the connector. Required."
                    },
                    "ConnectorId": {
                        "type": "string",
                        "description": "The id of the connector. Required."
                    },
                    "PortId": {
                        "type": "string",
                        "description": "The id of the port."
                    },
                    "MessageId": {
                        "type": "string",
                        "description": "The message Id."
                    },
                    "Direction": {
                        "type": "string",
                        "description": "The direction of the transaction."
                    },
                    "Type": {
                        "type": "string",
                        "description": "The type of the log file."
                    },
                    "IncludeContent": {
                        "type": "string",
                        "description": "Whether to return the content of the log file.",
                        "default": "False"
                    }
                }
            },
            "getTransactionLogs_output": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "TimeCreated": {
                            "type": "string",
                            "description": "The time the log file was created."
                        },
                        "Type": {
                            "type": "string",
                            "description": "The type of the log file."
                        },
                        "File": {
                            "type": "string",
                            "description": "The name of the log file."
                        },
                        "Path": {
                            "type": "string",
                            "description": "The path of the log file."
                        },
                        "Content": {
                            "type": "string",
                            "description": "The Base64 encoded content of the log file."
                        }
                    }
                }
            },
            "import_input": {
                "type": "object",
                "properties": {
                    "Arcflow": {
                        "type": "string",
                        "description": "A base64 encoded string containing the zip data for the arcflow."
                    },
                    "DuplicateAction": {
                        "type": "string",
                        "description": "Overwrite, Rename, Skip."
                    },
                    "Overwrite": {
                        "type": "string",
                        "description": "Overwrite the duplicated source.",
                        "default": "False"
                    },
                    "WorkspaceId": {
                        "type": "string",
                        "description": "The Workspace to import the arcflow into. If unspecified, the application will auto-detect which workspace to use based on the names of the workspaces in the arcflow, and fall back to the default workspace if no workspace is specified in the arcflow."
                    },
                    "InputName": {
                        "type": "string",
                        "description": "The name of the form input when uploading files from a form."
                    },
                    "DataDirectory": {
                        "type": "string",
                        "description": "The data directory or a zipped file where the profiles are stored."
                    },
                    "DecryptPassword": {
                        "type": "string",
                        "description": "The password for decrypting sensitive values."
                    },
                    "GlobalSettings": {
                        "type": "string",
                        "description": "The global settings that should be included in the import. One or more of the following values may be provided using a comma-separated string, or the special value \u201cALL\u201d can be used to import all global settings. Values: Partners, Documents, Users, Roles, Certificates, Connections, Vaults, Reports, Alerts, Advanced, AdminAPI, SSO."
                    },
                    "ProfileSettings": {
                        "type": "string",
                        "description": "The profiles that should be included in the import. One or more of the following values may be provided using a comma-separated string. The special value \u201cALL\u201d can be used to import all profiles. Values: AS2, AS4, GISB, RosettaNet, FTPServer, SFTPServer, HL7MLLP, OFTP."
                    }
                }
            },
            "receiveFile_input": {
                "type": "object",
                "properties": {
                    "WorkspaceId": {
                        "type": "string",
                        "description": "The workspace id of the connector."
                    },
                    "ConnectorId": {
                        "type": "string",
                        "description": "The id of the connector. Required."
                    },
                    "PortId": {
                        "type": "string",
                        "description": "The id of the port."
                    },
                    "File": {
                        "type": "string",
                        "description": "The file to be downloaded. When file is not supplied, all files will be downloaded based on the connector's settings."
                    },
                    "RemotePath": {
                        "type": "string",
                        "description": "The path to overrides the Remote path settings in the connector(Only used for FTP, SFTP)"
                    }
                }
            },
            "receiveFile_output": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "MessageId": {
                            "type": "string",
                            "description": "The message id of the file."
                        },
                        "Subfolder": {
                            "type": "string",
                            "description": "The subfolder of the file."
                        },
                        "File": {
                            "type": "string",
                            "description": "The name of the file."
                        },
                        "FileSize": {
                            "type": "string",
                            "description": "The size of the file."
                        },
                        "ErrorMessage": {
                            "type": "string",
                            "description": "When multiple files are transferred over the same connection, this will return the error message if an individual file transfer failed. If this is empty, the file transfer was successful."
                        }
                    }
                }
            },
            "sendFile_input": {
                "type": "object",
                "properties": {
                    "WorkspaceId": {
                        "type": "string",
                        "description": "The workspace id of the connector."
                    },
                    "ConnectorId": {
                        "type": "string",
                        "description": "The id of the connector. Required."
                    },
                    "PortId": {
                        "type": "string",
                        "description": "The id of the port."
                    },
                    "MessageId": {
                        "type": "string",
                        "description": "The message id."
                    },
                    "File": {
                        "type": "string",
                        "description": "The file name."
                    },
                    "Subfolder": {
                        "type": "string",
                        "description": "The subfolder of the file."
                    },
                    "Attachment#": {
                        "type": "string",
                        "description": "The attachment file."
                    },
                    "FormatResult": {
                        "type": "string",
                        "description": "Is format result."
                    }
                }
            },
            "sendFile_output": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "MessageId": {
                            "type": "string",
                            "description": "The message Id."
                        },
                        "File": {
                            "type": "string",
                            "description": "The file name."
                        }
                    }
                }
            },
            "CDataError": {
                "type": "object",
                "properties": {
                    "error": {
                        "$ref": "#/components/schemas/CDataInError"
                    }
                }
            },
            "CDataInError": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }
        },
        "securitySchemes": {
            "authtoken_header": {
                "type": "apiKey",
                "in": "header",
                "name": "x-cdata-authtoken"
            },
            "authtoken_query": {
                "type": "apiKey",
                "in": "query",
                "name": "@authtoken"
            },
            "basic": {
                "scheme": "basic",
                "type": "http"
            }
        }
    }
}